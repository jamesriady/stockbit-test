// Code generated by MockGen. DO NOT EDIT.
// Source: movie-service/domain (interfaces: MovieUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "movie-service/domain"
	reflect "reflect"
)

// MockMovieUsecase is a mock of MovieUsecase interface
type MockMovieUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUsecaseMockRecorder
}

// MockMovieUsecaseMockRecorder is the mock recorder for MockMovieUsecase
type MockMovieUsecaseMockRecorder struct {
	mock *MockMovieUsecase
}

// NewMockMovieUsecase creates a new mock instance
func NewMockMovieUsecase(ctrl *gomock.Controller) *MockMovieUsecase {
	mock := &MockMovieUsecase{ctrl: ctrl}
	mock.recorder = &MockMovieUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieUsecase) EXPECT() *MockMovieUsecaseMockRecorder {
	return m.recorder
}

// GetByTitleAndPage mocks base method
func (m *MockMovieUsecase) GetByTitleAndPage(arg0 string, arg1 int) ([]domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitleAndPage", arg0, arg1)
	ret0, _ := ret[0].([]domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitleAndPage indicates an expected call of GetByTitleAndPage
func (mr *MockMovieUsecaseMockRecorder) GetByTitleAndPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitleAndPage", reflect.TypeOf((*MockMovieUsecase)(nil).GetByTitleAndPage), arg0, arg1)
}
